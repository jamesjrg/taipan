////

complex finance stuff removed for time being:

- have stock prices affected by recent profit/loss and bank balance of each company
- add more complex ideas of debt and interest payments - e.g. dividends on shares, or interest payments on loans to buy goods to warehouse
- add trading in more complex derivatives
- make sure my GBM calculations for stock/commodity price variation are are exactly as they should be

Wikipedia on complex financial stuff:

If I wanted to add in some financial complexity:
http://en.wikipedia.org/wiki/Derivative_(finance)
	http://en.wikipedia.org/wiki/Futures_contract
	http://en.wikipedia.org/wiki/Option_(finance)
    http://en.wikipedia.org/wiki/Black%E2%80%93Scholes
    http://en.wikipedia.org/wiki/Geometric_Brownian_motion
    http://en.wikipedia.org/wiki/Wiener_process
	http://en.wikipedia.org/wiki/Swap_%28finance%29
		http://en.wikipedia.org/wiki/Interest_rate_swap
        
/////

mathematical/algorithmic stuff removed for time being:
        
- Make prices different at all ports all the time, and then try to make an algorithm such that traders are constantly choosing the most efficient routes to transport goods, with their future knowledge of the market a separate way to make money. 
- keep track of positions of freighters, and then alter system that creates a problem involving the most efficient routing pattern for them
- add mathematical modelling to wolfie (for set analyser, too)

/////

things that could be done to make it more complicated for the sake of it removed for time being:

- make it so freighters have different capacities, and make the bidding for contracts to move goods take account of this
- make it so sometimes quanity transported won't fit in a single freigher, so multiple freighters are involved in a single transport (perhaps from two seperate companies)
- add bumpf to database - company director names, commodity descriptions, country populations, etc
- have each shipping company only cover certain ports
- sometimes have contracts for movement of goods not be finalized, and then the lock is removed and other shipping companies can take up the offer
- "disasters" - sometimes purposefully knock out a Trader, FateAndGuessWork, ShippingCompany, Bank, or any other process - indeed could even have a GUI button to do so. Then watch system cope. Or financial disaster - massive crash or massive boom in prices could make a load of trader's predictions wrong and they all lose loads of money
- perhaps make traders take FX differences into account in choosing where to sell goods to? This would probably require making the FX model more complicated - e.g. add commission charges for changing between currencies
- make fluctuating fuel cost affect profit/lost of transporters on a trade, and maybe have oil tankers
- make different freighters travel at different speeds, and take this into account in logic in some places
- make it so traders can gamble on stock prices, as well as commodity prices, using same system as commodities currently use
- make it possible for companies and trading houses to go into debt, at which point they have to pay interest charges. if they ever get to a certain point of debt, they are bailed out by the government and their debt is reset to zero
- make it such that ships must sometimes go in for maintenance, which temporarily reduces trading house's number of freighters, and also costs money
- haev processes broadcast i'm-alive pings, and then on basis of these pings have bank create or delete database entries for the various economic players on the fly

///

front end stuff removed for the time being:
- have a WPF view with pretty charts and graphs and such like
- have an ASP web interface (WebView), add to wolfie + doc
- add a tab in formview/page in web view that is IE tab with MS maps or Google maps integration, with pins on the ports, and perhaps info boxes/some other visualisation of what is going on
- make GUI optionally output current stream of real time data to an Excel spreadsheet, updating the spreadsheet at regular ticks, add excel to 
wolfie + doc
- have the GUI draw pretty line graphs and charts of price changes etc
- GUI displays diagnostic system information on the current status of all the processes and their interactions. Maybe also a green or red light next to each one to show all are responding? This would require processes to keep records in the database of when they last communicated with each other.

/////

.NET stuff removed for time being:
- make use of LINQ

///

sql server stuff removed:
- faff with permissions and security and security schemas

////

make it a game idea never going to happen:

- GalaxyHack-ify it - allow pluggable AIs for trading houses (probably written in Python, i.e. use IronPython), and allow people to submit AIs. Change the rules a bit so it's a competitive game like GH or CoreWars. I guess this would work by making the algorithms for the prices at different places + changing exchange rates conform to certain definite guidelines, and the objective of AIs would be to work out these algorithms and so predict where and when to trade. There would also have to be strict limits on how much processor time each process got.

REALLY doubt there'd be much interest, though. Even if I managed to implement this (which would be no small task), the target niche of possible players would be so small it would never get enough players to make it work

///

hardcore comp sci ideas not going to happen:

- Write a small custom database system in C++ to replace SQL Server
- add some processes that use UDP and/or TCP rather than WCF, and make them incredibly scalable
- Write custom low level network code in C++

///

international politics ideas not going to happen:

Have it so natural distribution of wealth follows a particular curve in all countries, but have this curve affected by goverment action (e.g. % of spending on health/education/social security). At same time, have higher government spending reduce efficiency of economy overall (do this by making it weaken value of currency and/or reducing level of wealth citizerns have available to spend on consumption) and also keep track of each country's level of corruption (just a general figure which meant in incredibly general sense of "level to which money distribtution is determined neither by market nor by government, but rather by people with political power just directly taking it from state funds)

Based on the income distribution curve,
1. Keep track of the number of people in poverty in each country (both absolute poverty, and country-based relative poverty, e.g. with account to the country's median wealth)
2. Keep track of the number of people starving in each country
3. Have it so if a resource is in very high demand and only found in a small number of places, short wars take place
4. Have it so the consumption of certain resources creates environmental problems, that increases number of people poverty + numver of people starving

Collate turnover of production + service sectors along with government spending to calculate GDP, and also GDP per capita? Maybe add in concept of national debt, and link to value of both government spending and value of currency?

news_event (id, category, description, country)
news_event_category (id, name)

have port servers broadcast stupid news events

Have option for trading houses to move goods from places with high stocks and low need (however need is defined) to places with low stocks and high need, ignoring price

///

complex macro economics idea not going to happen:

each country needs to have a turnover held separetely for its production sector (mining, manufacturing, etc), which is dependent on export level+export price, and its service sector (retail, marketing, etc), which is dependent on consumption level + import price.

To make this actually simulate an economy rather than a solid state system, I need some (delayed) feedback loops. E.g.:
1. as a country becomes wealthier its improved education system means it starts producing more high value goods (like electronics + financial services) and less low value goods (like mining)
2. At same time, higher value goods rely on cheap, plentiful supply of lower value goods
2. Need to ensure the key feedback loop is "more wealth = more demand", such that production and consumption are both ever-increasing

trade in financial services, IT software and support

keep track of balance of trade and make it affect currency prices

/////

interaction of markets and psychology and everyday life stuff never going to happen:

Factor in marketing and advertising increasing demand, increasing salaries leading to increasing prices for real estate and living costs, perhaps have a level of satisfaction which is calculated by how well someone considers them off compared to those around them.

///

mini project:

Program that backs up a folder with a date appended to file name, and then sends it to an ftp server - remembers values for folders + ftp servers, has bookmarking system for both. Use 7-zip:

String zipper = @"F:\Program Files\7-Zip\7z.exe";
//type 7z, ignore pyc files
String args = "a -t7z -x!.pyc" + compressPath + " " + compressFolder;
Process proc = Process.Start(zipper, args);
proc.WaitForExit();          

Totally pointless given availability of things like dropbox

//

UML

- UML class diagram (hopefully this can just be exported from Visual Studio? Or otherwise imported from C# code to MagicDraw)
- do yet more diagrams

///

SQL:

- views
- stored procedures
- yet more normalisation
- yet more tuning
- set up some sort of OLAP functionality for large scale data analysis of historical data

////

Concurrency:

- read a bit of concurrency theory, and then put this into practice with regard to having it vey clear how concurrency features of my system are well designed and error-resistant, and then add this to doc
- improve concurrency aspects

///

web services:

get finance data from yahoo api rather than creating it myself - though tick rate could be an issue

///



