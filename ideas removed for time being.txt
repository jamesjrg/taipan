++++
Section 1: vaguely reasonable ideas:
++++

//
things I could really do with reading about even if I don't write more code:
- better understanding of rb trees, b-trees, and algorithmic approaches/efficiency
- more on linear programming

small things:
- SalePort column of commoditytrans doubles up to store destination of ships in transport, maybe should not do this - but then database would be denormalized
- refactor OutgoingDequeueAll to not require clients give an unused clientID, same with IncomingEnqueue
- should probably stop all financial transactions taking place in US dollars as an intermediary currency, this is rather inaccurate. would require changing much of db schema, db functions, and trader trading logic
- UML class diagram (hopefully this can just be exported from Visual Studio? Or otherwise imported from C# code to MagicDraw)
- export class documentation from XML doc strings
- on resolver summary sheets, add stats on total distances travelled by freighters
- maybe mention my thoughts on benefits of selective timed functions vs recalcualting whole workbook with RecalculateAfter - e.g. readConfig would have to be reupdated every tick, and combining constant update with buttons that create initial data just doesn't really work
- freighters should not always accept every single advertised move, like maybe they have limited freighters, or use idea from "big things" where freighters keep track of their positions
- some commodities not bought/sold at certain ports, for these places no price fluctuations (GBM or otherwise) are created
- network protocol labels on deployment diagram should be in <<, but this requires faffing with custom stereotypes
- add special case code if there are not sufficient values in db for resolver gbm prediction and graphing buttons
- make ntopupdate a variable within the Resolver sheet, not in settings.py. separate for commod and fx.
- add constraint on historical sheets such that there can't be multiple entries for the same date - i.e. UNIQUE constraints on (PortID, commodityID, time) in PortCommodityPrice, unique constraint on (x, x, date) in other tables too. though what is effect on performance?
- correctly deal with System.ObjectDisposedException for ReceiveThread
- fate&gw should take into account import/export prob for both GBM price fluctations and price jumps

medium things:
- add graphing to spreadsheets calls on algoservice
- actually use the algservice data structure methods somewhere
- balance should actually be taken into account both for what transactions are allowed and what transactions actors take - currently it is totally ignored, and people are totally unaffected if they go into debt
- proper scripts for integration testing
- stress testing, performance analysis, optimization
- on one of the resolver sheets have some distance between points/distance travelled by freighters info, and maybe make it use sql spatial data functions to do calculation
- add indexes, constraints, stored procedures, data types etc to db uml diagram
- there should be multiple random walks for each sequence on the WPF graphs, not just one
- open addressing hash table
- brownian random walk on WPF graph should be dashed line. This is far more effort than I first imagined, because brushes are applied to each time series as a whole, so I would have to add a totally new list of data series for the brownian points, and then in every single function that mentions the data series, I would have to add special case code for forecast series (e.g. they shouldn't have a key)
- TSP: modify the problem to match up better with the supposed real world that the system models - e.g. to to disallow certain arcs which involve travelling directly over large land masses, but allowing optional stop overs at certain ports and allow visiting ports more than once. Alternatively, could add costs and benefits to certain arcs representing the different profits and losses to be made by fufilling freight movement contracts on those shipping routes
- somehow remove all the stupid xSpecified arguments in the generated WCF proxy code?
- b+ tree

big things:
- Contribute a bit to an OS project?
- shipping companies should have a limited number of freighters, which restricts which shipping contracts they can accept. even more complex, the location of their freighters is tracked, and they have to work out if they have any freighters nearby to the required goods departure point
- read a bit of abstract concurrency theory, and then put this into practice with regard to having it vey clear how concurrency features of my system are well designed and error-resistant, and then add this to doc
- do research on ways to improve stress testing
- make processes be able to cope if other processes fall off network then reappear again (this would be a major undertaking)
- mapreduce (with some sort of made up query)

faff with database idea:
- Read database management systems chapters 19, 20, 21
- do some database normalisation and tuning, and security management
- faff about with different sorts of indexes etc, maybe also so totally pointless striping, clustering, etc
- maybe turn some of the Resolver queries into database views
- do some normalisation some time after the design has changed a bit, and doc how I carried this out, and doc what normal form the db is in
- doc optimization/tuning
- faff with permissions and security and security schemas

///

++++
Section 2: not especially reasonable ideas:
++++

complex finance stuff removed for time being:

- have stock prices affected by recent profit/loss and bank balance of each company
- add more complex ideas of debt and interest payments - e.g. dividends on shares, or interest payments on loans to buy goods to warehouse
- add trading in more complex derivatives
- investigate R1 docs/example sheets for more complex finance ideas
- along with all this, maybe add some complex sql queries/views which summarize data in various ways
- and maybe try to do some proper stats analysis

Wikipedia on complex financial stuff:

If I wanted to add in some financial complexity:
http://en.wikipedia.org/wiki/Derivative_(finance)
	http://en.wikipedia.org/wiki/Futures_contract
	http://en.wikipedia.org/wiki/Option_(finance)
    http://en.wikipedia.org/wiki/Black%E2%80%93Scholes
    http://en.wikipedia.org/wiki/Swap_%28finance%29
		http://en.wikipedia.org/wiki/Interest_rate_swap

///

Complex Maths and data analysis stuff removed - could be combined with finance stuff, or with data mining, or with mip optimization:

monte carlo:
    http://en.wikipedia.org/wiki/Monte_Carlo_method
    http://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo
    monte carlo integration
    pymc
bayesian:
    - read a bit of AI book
    - also http://en.wikipedia.org/wiki/Bayesian_inference
    - also http://webuser.bus.umich.edu/plenk/downloads.htm
    - do something with analysing data using Bayesian inference
data mining:
    - set up some sort of OLAP functionality for large scale data analysis of historical data in database - i.e. denormalization, useful indexes, etc
mip optimization:
    - read more of intro to theory of comp sci
    - more reading and playing with MS Solver
      
////

hardcore comp sci custom db idea:
- study far more of algorithms book
- study more advanced sections of databases book
- Write a small custom database system in to replace SQL Server, either in C# or C++. If C++ would ideally find the Minibase source code and replace sections of that as needed. Would probably just have it manage a small part of the state data, and leave most to SQL server. Would have to implement threaded network connections/cursors complete with locking during file system access, transactions, query parsing and execution, permissions, indexing
- would use UDP or TCP for connections, would ideally be very fast and scalable, either in C# or C++
- switch to async network connections - though wouldn't have much benefit given that system makes extensive use of threads (could allow creation of a single threaded version of system, but that wasn't really the design goal)

//

mini project:

Program that backs up a folder with a date appended to file name, and then sends it to an ftp server - remembers values for folders + ftp servers, has bookmarking system for both. Use 7-zip:

String zipper = @"F:\Program Files\7-Zip\7z.exe";
//type 7z, ignore pyc files
String args = "a -t7z -x!.pyc" + compressPath + " " + compressFolder;
Process proc = Process.Start(zipper, args);
proc.WaitForExit();          

Generally pointless given availability of things like dropbox

///

web services:

- get some finance data from yahoo api rather than creating it myself

/////

front end stuff removed for the time being:
- have a WPF view with pretty interactive real-time charts and graphs and such like that doesn't require Resolver
- have an ASP web interface (WebView), add to wolfie + doc
- GUI displays diagnostic system information on the current status of all the processes and their interactions. Maybe also a green or red light next to each one to show all are responding? This would require processes to keep records in the database of when they last communicated with each other.

////

.NET stuff removed for time being:
- make use of LINQ for db queries

///

things that could be done to make it more complicated for the sake of it removed for time being:
- keep track of which transactions are to do with primary, secondary or tertiary sector, then include this data on summary sheets
- make it so freighters have different capacities, and make the bidding for contracts to move goods take account of this
- make it so sometimes quanity transported won't fit in a single freigher, so multiple freighters are involved in a single transport (perhaps from two seperate companies)
- when traders sell warehoused goods to make profit on fateandguesswork prediction, prices should rebound back towards where they were before. this would require fateandgw keeping track of the price jumps that it has created, and then partially "undoing" them after sale of warehoused goods/futures settle. but why would a single trade affect global prices?
- add bumpf to database - company director names, commodity descriptions, country populations, etc
- have each shipping company only cover certain ports
- sometimes have contracts for movement of goods not be finalized, and then the lock is removed and other shipping companies can take up the offer
- "disasters" - sometimes purposefully knock out a Trader, FateAndGuessWork, ShippingCompany, Bank, or any other process - indeed could even have a GUI button to do so. Then watch system cope. Or financial disaster - massive crash or massive boom in prices could make a load of trader's predictions wrong and they all lose loads of money
- perhaps make traders take FX differences into account in choosing where to sell goods to? This would probably require making the FX model more complicated - e.g. add commission charges for changing between currencies
- make fluctuating fuel cost affect profit/lost of transporters on a trade, and maybe have oil tankers
- make different freighters travel at different speeds, and take this into account in logic in some places
- make it so traders can gamble on stock prices, as well as commodity prices, using same system as commodities currently use
- make it possible for companies and trading houses to go into debt, at which point they have to pay interest charges. if they ever get to a certain point of debt, they are bailed out by the government and their debt is reset to zero
- make it such that ships must sometimes go in for maintenance, which temporarily reduces trading house's number of freighters, and also costs money
- have processes broadcast i'm-alive pings, and then on basis of these pings have bank create or delete database entries for the various economic players on the fly
- keep track of positions of freighters, and have a web app with MS maps or Google maps integration, with pins on the ports and also maybe on the freighters, and perhaps info boxes/some other visualisation of what is going on

Resolver:
- Python script that simulates database reads by just returning incremental data from a mass of stored historical data - this will allow me to redistribute sheet without requiring dependency on rest of system. also doc this on web.

////

Make it a game - allow people to take control of trading houses with custom logic code. I imagine this would work thusly:
1. Make trader logic optionally take decisions on the basis of instructions via UDP or TCP messages rather than guesswork messages from fateandguesswork
2. This would technically allow control in any language or program, but I would take advantage of already having worked with Resolver One to make a template ResolverOne spreadsheet for controlling trader logic
3. For this to make any sense as a game, algorithms that control prices at different ports + changing exchange rates would have to conform to certain definite guidelines, and the objective of people's logic code would be to predict results on the basis of these algorithms to make the best trades. This would clearly involve a massive amount of research into financial mathematics.
5. If it were to be truly competitive game as opposed to just single player, the rules would have to be set such that there is no ultimately "correct" answer. Also, there would either a) need to be a central server running the game to which players connect or b) if it is done corewars/galaxyhack style and the game is not continuous, there would need to be strict limits on how much processor time each process got.
6. Could keep certain price change and behaviour algorithms for certain actors closed source and ony allow people to access their results via a web server. This would stop cheating by looking at the source code.
7. Or alternatively could make it single player, in which case if people cheat then that is up to them.
8. Could have a continuous multiplayer game where the idea is to make the maximum amount of money possible each day with a given amount to invest, or could instead make it a single player game of with "levels", whereby with each level you have to work out a particular algorithm plus its parameters.
9. Possibly ideas for challenges include: 1. notice when GBM has been interuptted by a sudden price drop/increase 2. work out the parameters of GBM 3. parameters of GBM are constantly changing, and see who has the best algorithm for quickly working out these changes 4. have a variety of different factors affecting profit/loss (e.g. fluctuations in currency, shares, commodities, various things you can do like futures contracts and warehousing), and then the challenge is to come up with the best "AI" which takes all these things into account to make the most money

REALLY doubt there'd be much interest, though. Even if I managed to implement this (which would be no small task), the target niche of possible players would be so small it would never get enough players to make it work. But could be interesting to try to implement?

UML:
- add data type for each attrib on SQL diagram

++++
Section 3: truly silly ideas:
++++

international politics idea:

Have it so natural distribution of wealth follows a particular curve in all countries, but have this curve affected by goverment action (e.g. % of spending on health/education/social security). At same time, have higher government spending reduce efficiency of economy overall (do this by making it weaken value of currency and/or reducing level of wealth citizerns have available to spend on consumption) and also keep track of each country's level of corruption (just a general figure which meant in incredibly general sense of "level to which money distribtution is determined neither by market nor by government, but rather by people with political power just directly taking it from state funds)

Based on the income distribution curve,
1. Keep track of the number of people in poverty in each country (both absolute poverty, and country-based relative poverty, e.g. with account to the country's median wealth)
2. Keep track of the number of people starving in each country
3. Have it so if a resource is in very high demand and only found in a small number of places, short wars take place
4. Have it so the consumption of certain resources creates environmental problems, that increases number of people poverty + numver of people starving

Collate turnover of production + service sectors along with government spending to calculate GDP, and also GDP per capita? Maybe add in concept of national debt, and link to value of both government spending and value of currency?

news_event (id, category, description, country)
news_event_category (id, name)

have port servers broadcast stupid news events

Have option for trading houses to move goods from places with high stocks and low need (however need is defined) to places with low stocks and high need, ignoring price

///

complex macro economics idea:

each country needs to have a turnover held separetely for its production sector (mining, manufacturing, etc), which is dependent on export level+export price, and its service sector (retail, marketing, etc), which is dependent on consumption level + import price.

To make this actually simulate an economy rather than a solid state system, I need some (delayed) feedback loops. E.g.:
1. as a country becomes wealthier its improved education system means it starts producing more high value goods (like electronics + financial services) and less low value goods (like mining)
2. At same time, higher value goods rely on cheap, plentiful supply of lower value goods
2. Need to ensure the key feedback loop is "more wealth = more demand", such that production and consumption are both ever-increasing

trade in financial services, IT software and support

keep track of balance of trade and make it affect currency prices

/////

interaction of markets and psychology and everyday life stuff never going to happen:

Factor in marketing and advertising increasing demand, increasing salaries leading to increasing prices for real estate and living costs, perhaps have a level of satisfaction which is calculated by how well someone considers them off compared to those around them.

///

Translate web doc into Chinese, Japanese, and French

///




