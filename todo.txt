* finish all main points of network code and process logic
- est 1 week FT

* finish all main points of spreadsheet summary sheets
- est 1 week full time

* read parts of algorithms book chapters 2,3,4,5,6,7, then 10,11,12,13, then 18
* do all basic of algorithms bit
- est 1.5 weeks full time

* read algorithms book chapters 22, 29, 34, 35, and a bunch of TSP/MS Solver stuff
* do TSP stuff
- est 1 week FT

* doc a bit better
- proper index.htm + screenshots
- add version with static sql data to resolver exchange
- est 2 days FT


- ideas from "ideas removed" file - infinite

////
git change log:


nowish:
- read more about linear programming, graph problems, tsp, convert more C# code to Python
- read more detail from algs book
- fix heap sort
- DecideMoveContracts in trader - add and remove
- sql server process CPU usage way too high, fix it (+ doc)
- read about + implement binary search trees, rb trees, b trees
- people can now send and receive messages, so make a first attempt at adding in all the logic that goes with this (though also still need to do a little more work with regard to keeping track of client/server ids). for client keeping track of server ids, can just store connections in a dict
- shippingcomps need to know distance between ports to work out how long journeys take, and banks need to know to work out how much shipping companies should charge for movements. should use db spatial functions. do this on shippingcomp init and create a dict of all the values, and then include distances in msgs to bank? or maybe create a computed database table with all this data, for use by both shippingcomp and bank. 2nd option is better.
- DecideArrivals and MoveConfirmed in ShippingCompany
- traderClient.Send in ShippingCompany - sent to only one client, also server tcp thread needs to note id of sender for MoveAdvertised 
- Bank interpret movingmsg from shippingcompany - needs to note id of sender
- bank msgs to trader - buyconfirm, futuresettle
- trader interpret forecast msgs
- trader msgs to bank, and bank needs to note id of sender
- bank interpret trader msgs
- trader interpret forecast msgs
- DecideCommodPriceJumps for fandgw
- shippingcompany interprets advertise moves
- traders confirm moves
- shippingcompany acts on moveconfirm

////

Process logic and networking:
- in server, clients should get removed from clients list if they are disconnected
- net_msg_todo.txt
- unit test individual functions
- probably use sql spatial functions to work out distances for freighter travel - both for Bank and for Resolver
- test that targeted messages are sent only to the correct server/client, and have exact steps to reproduce the test (inc fandgw to trader surplus and shortage)

///

First two tabs of Resolver sheet (GBM data streams):
- make commod prices forecast + graphing work fully correctly
- add special case code if there are not sufficient values in db?

Next two sheets:
3. Historical futures contracts, including details of how relevant prices of all involved values changed between start and end of contract, and profit made (CU)
4. Historical commdity transports, including details of how relevant prices of all involved values changed between start and end of contract, and profit made (CU)

Just some database queries

Thirdly, summary data sets:

5. Summary data for each trader, split into time periods
Drop down to select trader
- show name, balance, etc
For each time period, have:
- info on futures
- info on warehouse buys
- profit/loss
- balance at end of period

6. Summary data for each shipping company, split into time periods
Drop down to select company
- shown name of company's country, and its currency, and balance, and stock price
For each time period, have:
- number of different ports served
- average quantity per load
- min quantity in a single load
- max quantity in a single load
- av share price (own currency)
- av share price (USD)
- profit/loss
- balance at end of period

7. Summary data on comparative historical record of countries, split into time periods
Drop down to select country
- name of country's currency
in each time period have
- number of and total value of buys
- number and total value of settled futures
- overall outgoings, overall income, overall profit/loss
- number of futures agreed in period
- average diff between futures settled price in period and price they were agreed at
- average value of currency vs USD


////

Fourthly, extreme contrivedness:
8. Travelling freighter problem

- finish Python conversion
- need to work out the distances between all the ports - in Python or in SQL? then cache
- provide dropdowns on the spreadsheets to select which ports are to be included in the tour

links:

tsp generally:
http://archive.ite.journal.informs.org/Vol7No1/LeeRaffensperger/
http://iris.gmu.edu/~khoffman/papers/trav_salesman.html
http://en.wikipedia.org/wiki/Travelling_salesman_problem

solver foundation generally:
http://code.msdn.microsoft.com/solverfoundation
http://yetanothermathprogrammingconsultant.blogspot.com/2009/02/ms-solver-foundation-gurobi-2.html
http://yetanothermathprogrammingconsultant.blogspot.com/2009/02/tsp-powerset-formulation.html
http://blogs.msdn.com/lengningliu/archive/2009/11/04/using-solver-foundation-and-plug-in-solvers-in-ironpython.aspx
http://www.amsterdamoptimization.com/msf.html

both together:
http://blogs.msdn.com/natbr/archive/2009/04/27/solving-traveling-salesman-problems-using-solver-foundation.aspx
http://blogs.msdn.com/natbr/archive/2009/05/07/solver-foundation-tsp-part-ii-directives-solver-plugins-model-libraries.aspx

also:
http://en.wikipedia.org/wiki/Linear_programming
http://en.wikipedia.org/wiki/Priority_queue

///

9. sheet that calls AlgoService sort methods with various combinations of parameters (diff lists, diff algorithms), doing each one for a large number of iterations, and gets returned data on time taken.Mark winner for each category by changing font color.

///

General Resolver things to do:
- make ntopupdate a variable within the sheet, not in settings.py. separate for commod and fx.
- Possibly some vaguely sensible management (decisions on when to reuse + close) of the db connection?

////

testing:
- write tests for multihead queue and syncqueue
- unittest only bank can write to db
- make processes do right thing when other processes go down, and have automated tests for all possibilities if differing orders of collapse.
- unittest the algoriths and data structures service
- unittest multiheadqueue
- database connections should be closed when no longer needed

////

algorithms bit:
following remote methods

CreateStructure()
args: which structure, list
returns: structure id, time taken

Time results from structure()
args: structureid
returns: structure id, time taken

Time results from sort alg()
args: method, list
returns: time taken

DeleteStructure
args: structure id
returns: success or failure

TimeMethod
method 2: 
1. enum of method to use 2. the list 3. whether to return

- using info both in algos book and database book, have an entirely pointless AlgoServer (including on UML diagram, with a note of explanation) that has functions to create various complex data structures and run various algorithms.

implement the following:
- insertion sort
- merge sort
- heap sort
- quick sort
- randomized quick sort
- counting sort
- hash table
- binary search tree
- red-black tree
- b-tree

It has two types of call, one returns the result, the other just returns how long the procedure took.

- start script for algoserver
- unit test
- does data contract require I use get/set properties? how exactly does data contract work?

///

doc:

The name is a nod to book Tai Pan, that is the general point is that there are several large trading houses which ferry various goods very long distances, though actually here the trading houses have been split into two distinct entities, the "Shipping companies" who do the actual transporting of goods, and the "traders" who predict surpluses and shortages in the market and buy and sell goods accordingly.

One day the description here, description in index.htm, description on CV, and description in Wolfie will all need to be synced...

Also make sure names match up UML <-> sql and vice versa

Deployment UML diagram: does anyone else access the db after start up?

short version for CV etc:

•	A C# .NET, SQL Server and Python project written to improve my knowledge of various aspects of computer science and software engineering. A large number of heterogeneous, multithreaded C# processes interact with each other via TCP sockets. Much of the underlying state of the system is stored in a MS SQL Server instance. The system includes implementations of various data structures and algorithms (e.g. B-Trees, hash tables, numerous sorting algorithms, a couple of probability distributions). A user interface to the system is provided in the form of an IronPython-based spreadsheet that a) makes queries on both the database and on a C# SOAP web service b) loads a C# WPF assembly to produce interactive graphs of the summary data and c) utilises a mathematical optimization framework to solve a simple linear programming problem. The project also makes use of UML, unit testing, Git, etc. Around 250 hours work so far.

