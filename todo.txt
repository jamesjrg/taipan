* finish spreadsheet summary sheets
- est 1 days FT

* finish all btree methods, and finish unit tests for all data structures
- est 2 days FT

* finish SOAP methods for data structure manipulation
- est 1 days FT

* testing and performance analysis
- lots

- ideas from "ideas removed" file - infinite

////
git change log:
- add VS profiling sessions
- add some more timing code for profiling
- did some profiling both via VS and via timing code, and as a result decided to comment out some more commodities in insert_data. debug bank loop time down from about 3 seconds to 0.5 seconds.
- accidentally forgot to add NOCOUNT and transactions to some of the stored procedures
- write a trigger version of a stored procedure as an exercise, but commented out, no reason to change to using triggers

nowish:

- countrysummary sheet needs testing, and also finishing
- trader and shipping co summary sheets need doing
- banklogic tests use rollback attrib - make sure the attrib works
- still some future requests are refused by bank for not being sufficently far into future. do some more profiling to find out why. it takes a second or two for a message to go from fandgw to trader, and another second or two to get to bank, a total of a about 3 sec from send to console print, when it should be more like 1-2 sec total. trader main loop is never more than about 0.5s, usually much less, bank main loop averages about 0.5s, plus maybe 0.5 sec of the various loops in diff threads and processes sleeping as not all in sync. maybe code run by network threads is slow?
- seems to be a fair lag between a commodity being bought and it being loaded on a ship for sale, is this a performance issue or just a result of the size of the various tick waits defined? try to reduce this time gap.
- BTree: dump method, unit tests, and delete method
- what is currencyaccuraacy setting in config there for?
- the vars in Globals.cs which are set from config file ought to do something to stop them being changed except on init. readonly doesn't work with static.
- make insertion of futurescontract a stored proc, that errors if settlement time is in the past. then banklogic should catch this exception and print msg in console. plus need a test for this.
- analyse performance and tune
- search for xxx using igrep

////

Process logic and networking:
- currently predictions of f&gw have no relation to what actually happens, maybe they should?
- if a shortage is predicted, it might be wise to buy from a nearby port, not the actual port depending on difference in price and transportation cost
- in server, clients should get removed from clients list if they are disconnected
- net_msg_todo.txt

////

automated testing still todo:

BTree test strategy:
- create a dump method that gives current state of btree as a string, then have assertData method that includes before and after string representations of btree for diff operations with diff values, as well as obviously making sure search method returns correct values, and if a key is deleted then searching for it returns null.

Other unit tests:
- finish unit testing all data structures - still not properly tested are hash table, binary search tree, rb tree, b-tree
- counting sort not yet unit tested (Can't remember why not)
- unittest multihead queue and sync queue
- unittest only bank can write to db
- test: fandandgw should keep track of its last tick time, if current tick time is the same time, skip

Integration tests:
- integration/unit test various main EconomicPlayer classes, inc Bank using [rollback]
- make processes do right thing when other processes go down, and have automated tests for all possibilities if differing orders of collapse.
- some sort of test that does create db, then start all processes, then run 20 seconds, then bunch of sql queries, then check data is sane
- test that targeted messages are sent only to the correct server/client, and have exact steps to reproduce the test (inc fandgw to trader surplus and shortage)
- some test that ensures multiple shipping companies are not taking the same move contract
- test serttlement times always later than purchasetimes, and that they get settled

////

algorithms/data structures stuff:
- switch counting sort to only find max value once, before iterations or timer begin
- do soap methods for manipulating data structures

///

Notes on delays between processes (though sleep constants may have changed by the time you read this):

fandgw -> trader -> bank:
FAGW has min forecast distance of 5 seconds, and bank insists on leeway of 1 seconds
Ignorning overhead of actual rnnning code, this trip would take max of 100ms FAGW server thread delay, 100ms Trader client thread delay, 200ms trader main loop delay, 100ms trader client thread delay, 100ms bank server thread delay, 200ms bank main loop delay = 0.8 seconds, in the worst case, but obviously actually running the code does in fact have an overhead

////

doc:

notes:

The name is a nod to book Tai Pan, that is the general point is that there are several large trading houses which ferry various goods very long distances, though actually here the trading houses have been split into two distinct entities, the "Shipping companies" who do the actual transporting of goods, and the "traders" who predict surpluses and shortages in the market and buy and sell goods accordingly.

One day the description here, description in index.htm, description on CV, and description in Wolfie will all need to be synced...

Also make sure names match up UML <-> sql and vice versa

- release.bat - copy across sql scripts, AlgoServiceProxy.dll, dll creation script, Resolve.rsl and associated .pys, README, howtorun, web, wpfchart compiled version and source, precompiled statslib and source, a note on how this is a cut down static sql version without all the c# processes and include fact doc is in web dir

short description:

see index.htm
