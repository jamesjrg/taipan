* finish all main points of network code and process logic, and write some tests
- est 3 days FT

* finish all main points of spreadsheet summary sheets
- est 2 days full time

* finish all btree methods, and finish unit tests for all data structures
- est 3 days full time

- ideas from "ideas removed" file - infinite

////
git change log:

nowish:
needs writing now:
- BTree: dump method, unit tests, and delete method
- finish trader MoveAccepted, buyconfirmed, SurplusForecast, shortageforecast, DecideSales
- trader decidesales: needs to take into account distance * fuel price to each port, also commod price at each port, also exchange rate at each port
- trader decidesales needs to account for possibility that best sale location may be the place where goods are currently warehoused. if so, don't need to contract a shipping company, just sell directly - and bank needs to be able to cope with this
- finish all the spreadsheet sheets filled from database queries (ideally inter process logic needs a bit more work first). Prices are converted from local currency to historical USD value
- tweak freighter speed in config
- search for xxx using grep

needs testing now:
- sql procShipArrived, procCommoditySale
- unit testing of data structures
- unit testing of other stuff
- test GetPortDistancesLookup
- test shippingcompany DecideArrivals
- test Bank EnactBuy, ShipDeparted, FutureSettlements, EnactFuture, shiparrived
- tweak fuelcost, FreighterSpeed

////

Process logic and networking:
- in server, clients should get removed from clients list if they are disconnected
- net_msg_todo.txt

////

testing:

BTree test strategy:
- create a dump method that gives current state of btree as a string, then have assertData method that includes before and after string representations of btree for diff operations with diff values, as well as obviously making sure search method returns correct values, and if a key is deleted then searching for it returns null.



- write tests for multihead queue and syncqueue
- unittest only bank can write to db
- make processes do right thing when other processes go down, and have automated tests for all possibilities if differing orders of collapse.
- some sort of test that does create db, then start all processes, then run 10 seconds, then bunch of sql queries, then check data is sane
- unittest multiheadqueue
- test: fandandgw should keep track of its last tick time, if current tick time is the same time, skip
- test that targeted messages are sent only to the correct server/client, and have exact steps to reproduce the test (inc fandgw to trader surplus and shortage)

still need to finish unit tests for the following data structures:
- hash table
- binary search tree, rb tree, b-tree
- counting sort

////

algorithms/data structures stuff:
- switch counting sort to only find max value once, before iterations or timer begin
- do soap methods for manipulating data structures

///

doc:

The name is a nod to book Tai Pan, that is the general point is that there are several large trading houses which ferry various goods very long distances, though actually here the trading houses have been split into two distinct entities, the "Shipping companies" who do the actual transporting of goods, and the "traders" who predict surpluses and shortages in the market and buy and sell goods accordingly.

One day the description here, description in index.htm, description on CV, and description in Wolfie will all need to be synced...

Also make sure names match up UML <-> sql and vice versa

- release.bat - copy across sql scripts, AlgoServiceProxy.dll, dll creation script, Resolve.rsl and associated .pys, README, howtorun, web, wpfchart compiled version and source, precompiled statslib and source, a note on how this is a cut down static sql version without all the c# processes and include fact doc is in web dir

short description:

A C# .NET, SQL Server and Python project written to improve my knowledge of various aspects of computer science and software engineering. The back end code is written in C#, whilst most of the front end - utilising the IronPython spreadsheet Resolver One - is written in IronPython. The system features a large number of heterogeneous, multithreaded C# processes, most interacting via TCP sockets, one acting as a SOAP web service. It makes extensive use of SQL (most of the underlying state of the system is stored in a MS SQL Server instance) and algorithmics (e.g. implementations of B-Trees, hash tables, numerous sorting algorithms, and Geometric Brownian Motion). It also makes use of Microsoft Solver Foundation (a mathematical modelling framework). The project is described by a series of UML diagrams, and partly covered by unit tests.


