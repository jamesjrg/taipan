* finish network code and process logic
- est 1.5 days FT

* finish spreadsheet summary sheets
- est 1.5 days FT

* finish all btree methods, and finish unit tests for all data structures
- est 2 days FT

* finish SOAP methods for data structure manipulation
- est 1 days FT

- ideas from "ideas removed" file - infinite

////
git change log:

nowish:
- reduce the time lag between when traders are given prediction and when that preduction occurs? currently have to wait about for 10-20 secs after processes start up to start seeing action
- BTree: dump method, unit tests, and delete method
- finish all the spreadsheet sheets filled from database queries (though finish DecideSales first). Prices are converted from local currency to historical USD value
- tweak freighter speed in config
- make sql "in" queries with variable length arg list work without using string interpolation, in C# and in tfppreconstants.py
- analyse performance and tune
- integration/unit test various main EconomicPlayer classes, inc Bank using [rollback]
- search for xxx using igrep

needs ad-hoc testing now:
- sql procShipArrived, procCommoditySale
- test GetPortDistancesLookup
- test shippingcompany DecideArrivals
- test trader MoveAccepted, BuyConfirmed, SurplusForecast, ShortageForecast
- test Bank EnactBuy, ShipDeparted, FutureSettlements, EnactFuture, shiparrived

////

Process logic and networking:
- in server, clients should get removed from clients list if they are disconnected
- net_msg_todo.txt

////

automated testing still todo:

BTree test strategy:
- create a dump method that gives current state of btree as a string, then have assertData method that includes before and after string representations of btree for diff operations with diff values, as well as obviously making sure search method returns correct values, and if a key is deleted then searching for it returns null.

Other unit tests:
- finish unit testing all data structures -still not properly tested are hash table, binary search tree, rb tree, b-tree
- counting sort not yet unit tested (Can't remember why not)
- unittest multihead queue and sync queue
- unittest only bank can write to db
- test: fandandgw should keep track of its last tick time, if current tick time is the same time, skip

Integration tests:
- make processes do right thing when other processes go down, and have automated tests for all possibilities if differing orders of collapse.
- some sort of test that does create db, then start all processes, then run 10 seconds, then bunch of sql queries, then check data is sane
- test that targeted messages are sent only to the correct server/client, and have exact steps to reproduce the test (inc fandgw to trader surplus and shortage)

////

algorithms/data structures stuff:
- switch counting sort to only find max value once, before iterations or timer begin
- do soap methods for manipulating data structures

///

doc:

notes:

The name is a nod to book Tai Pan, that is the general point is that there are several large trading houses which ferry various goods very long distances, though actually here the trading houses have been split into two distinct entities, the "Shipping companies" who do the actual transporting of goods, and the "traders" who predict surpluses and shortages in the market and buy and sell goods accordingly.

One day the description here, description in index.htm, description on CV, and description in Wolfie will all need to be synced...

Also make sure names match up UML <-> sql and vice versa

- release.bat - copy across sql scripts, AlgoServiceProxy.dll, dll creation script, Resolve.rsl and associated .pys, README, howtorun, web, wpfchart compiled version and source, precompiled statslib and source, a note on how this is a cut down static sql version without all the c# processes and include fact doc is in web dir

short description:

see index.htm
