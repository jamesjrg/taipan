<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>

<title>Tai-Pan</title>
<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">

<style type="text/css">
body {font: 100% Sans-serif; background-color: #FFFFFF;}
div.wrapper {font: 100% Sans-serif; background-color: #D2DEFF; width: 94%; padding:20px; margin: 40px auto 40px auto;}
</style>

</head>

<body>

<div class="wrapper">
<h2>Tai-Pan</h2>

<h3>Introduction</h3>

<p>"Tai-Pan" is a C# .NET, SQL Server and Python project that simulates certain features of a global trading economy, written to improve my knowledge of the theory behind relational databases, concurrency, distributed systems, software engineering, and mathematical modelling. A large number of C# client and server processes, some of which are multi-threaded, broadcast and poll XML messages, whilst simultaneously interacting with a SQL Server database that holds most of the underlying state of the system. A Python program makes use of a spreadsheet/Python IDE "mash up" called Resolver One to manipulate and analyse the real time data from the database.</p>

<p>This web page provides an outline of the project, divided into the following sections:</p>
<ul>
<li><a href="#heng">Software Engineering</a></li>
<li><a href="#hsql">Relational databases</a></li>
<li><a href="#hconcurrency">Concurrency and distributed systems</a></li>
<li><a href="#hmath">Mathematical modelling</a></li>
</ul>
</p>

<p>&nbsp;</p>

<h3 id="heng">Software Engineering</h3>

<p><img src="images/Deployment.png"/></p>

<p>blah blah the system is entirely contrived to solve a non-existent problem, but division into multiple processes that communicate via asynchronous messages means that:</p>

<ul>
<li>could be v distributed across multiple computers</li>
<li>there is a clear seperation of concerns, which means each sub system need not know any of the details of any other sub system. could change or replace one sub-system without affecting the others</li>
</ul>

<p>blah blah asynchronous nature of messaging, blah blah bank only guy with db write access, etc</p>

<p>Blah blah more UML diagrams describing other aspects of the system in following sections</p>

<p>xxx blah blah test driven development (proper test-first strategy on most sections of the program, but not on concurrent/networked aspects, could be asomething I look at another time. semi-followed before at Isotoma</p>

<p>For source control I used Git. I have used source control on almost every single software project I have been involved in since 2004, both commercial and non-commercial. I have mostly used SVN and CVS, but for a few recent projects, including this one, I have used Git. I can see how the distributed nature of Git, and it's emphasis on branching and merging, makes it very well suited to distributed open source projects. For projects like this one, with just one developer - or in fact any project which doesn't make substantial use of branching and merging - I'm not convinced Git is any more productive to use than SVN.</p>

<p>The git repository for the project is at <a href="http://github.com/jamesjrg/taipan">http://github.com/jamesjrg/taipan</a></p>

<h3 id="hsql">Relational databases</h3>

<p><img src="images/DB Schema.png"/></p>

<p>The tangle of foreign key arrows here is a total mess, possibly I should do something to make the diagram more readable, but nevermind.</p>

<p>In the centre of the diagram are some classes which hold entries for the economic players represented as C# processes - Trader, PublicCompany (which includes Shipping Companies) and DomesticCompany. "Company" is a base table for "Public Company" and for "Trader". "Public Company" is in turn a base table for "DomesticCompany". blah blah explanation of diagram.</p>

<p>There are four tables containing historical data on monetary balances and values, each of which uses a trigger to update the current price attribute in the table for which they are recording historical data. xxx therefore there are four redunadntly stored values, as a search of the historical data tables whenever a value or balance was required would be very inefficient. Within individual tables there are no repeating groups, no non-prime attributes that are functionally determined by only part of a candidate key, no non-prime attributes transitively dependent on a candidate key, and no prime attributes functionally determined by a proper subset of a candidate key. As such the schema is in Boyce-Codd normal form.</p>

<p>blah blah stored procedures (briefly toyed with some util sps but found not needed), talk about where I've used before (sde, setanalyser, forkd). blah blah some basic security and permissions - seperate r and rw logins to db, only bank and sql creation scripts use rw. but given there is in reality only one user, myself, complex security permissions schemes applying to different tables, sql views and such like would be complexity even more contrived than the rest of the project.</p>

<p>blah blah blah tuning and efficiency and indexes very large tables</p>

</ul>
</p>

<h3 id="hconcurrency">Concurrency and distributed systems</h3>

<p>[UML communication diagram - several processes, SQL, database]</p>

<p>xxx brief explanation of diagram. xxx explain messaging protocol - relatively low level tcp sockets, tried wpf but not really suited.</p>

<p>blah blah concurrency with processes and within processes with threading, blah blah contract for movements of goods and locking process</p>

<p>[UML diagram of locking process]

<p>blah blah explanation of diagram</p>

<p>blah blah in terms of formal testing and guarantees of reliability regarding the concurrent aspects of the system, I have not currently done much serious work. Concurrency is not well suited to normal unit testing, and effectively setting up automated tests of concurrent systems is a very large topic. I may do further reading on this subject in future.</p>

<p>As far as networking efficiency is concerned, blah blah quite efficient cos low level tcp, though there is no doubt room for optimization, which I might look into at some point. blah still, might be nice to build on what I have learnt about networking blah blah mention I have done some slightly complex networking stuff before (blah blah mention Twisted at Isotoma and my threaded Java app and TCP at Opera).</p>

<h3 id="#hmath">Mathematical modelling</h3>

<p>[screenshot of spreadsheet maths stuff]</p>

<p>[screenshot of graph]</p>

<p>I considered various options for a user front end that analysed the data. It needed to display large amounts of real time data, to carry out some mathematical analysis on that data, and also to display graphs and charts. There would be some user interaction with regard to selecting the current view of the data or variables used in its analysis, but a complex GUI was not required. The most instantly accessible yet also most difficult option would have been to use some sort of web front end using AJAX. It is possible to display, analyse and visualise large amounts of real time data using Javascript, but it's extremely time consuming and difficult. A more reasonable option would be C# combined with either Windows Forms and WPF (including Silverlight). However, WPF and WinForms are large, complex GUI frameworks, and would be overkill for the simplistic user interaction the program required, whilst complex data analysis code written in C# would require spending lots of time in a code-compile-test cycle.<p>

<p>I eventually settled instead on Resolver One, a spreadsheet program that is a "mash up" of a conventional spreadsheet, a Python program, and a Python IDE. This looks at first site like a conventional spreadsheet program, but in fact the entire spreadsheet is exposed as a Python program, making it very easy to write code that performs complex data analysis.</p>

<p>blah blah GBM, solving equations, real time data, analysis, etc</p>

</div>
</body>
</html>
