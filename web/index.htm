<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>

<title>Tai-Pan</title>
<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">

<style type="text/css">
body {font: 100% Sans-serif; background-color: #FFFFFF;}
div.wrapper {font: 100% Sans-serif; background-color: #D2DEFF; width: 94%; padding:20px; margin: 40px auto 40px auto;}
</style>

</head>

<body>

<div class="wrapper">
<h2>Tai-Pan</h2>

<h3>Introduction</h3>

<p>"Tai-Pan" is a C# .NET project that simulates a trading economy. In order to improve my knowledge of .NET, as well as the theory behind relational database design and management, concurrency, and software engineering, the project was purposefully designed to be fairly complex. As such there are a large number of heterogeneous, multi-threaded client and server processes broadcasting and polling XML messages, whilst simultaneously interacting with a SQL Server database that holds most of the underlying state of the system. A WPF GUI provides analysis of the real-time data. 

<p>The purpose of this web page is to demonstrate what I learnt. Click one of the headings below to jump to a section which interests you:</p>
<ul>
<li><a href="#heng">Software Engineering (software design, UML, unit testing, source control, etc)</a></li>
<li><a href="#hsql">SQL and SQL Server</a></li>
<li><a href="#hconcurrency">Concurrency and networking</a></li>
<li><a href="#hdotnet">C# and .NET</a></li>
</ul>
</p>

<p>&nbsp;</p>

<h3 id="heng">Software Engineering</h3>

<p>[UML diagram of overall layout - several processes, XML, SQL, database]</p>

<p>xxx see more UML diagrams in later sections on concurrency and SQL</p>

<p>xxx brief explanation of diagram</p>

<p>xxx blah blah test driven development (Isotoma, concurrency, etc)</p>

<p>blah blah compare git to svn and cvs, and talk about how i've used them both loads</p>
<p>blah blah link to git hub</p>

<h3 id="hsql">SQL and SQL Server</h3>

<p>[diagram of database design]</p>

<p>blah blah explanation of diagram</p>

<p>blah blah blah ER design</p>
<p>blah blah blah normal forms</p>
<p>blah blah blah triggers, inheritance (whatever correct term is), stored procedures, views, etc, talk about where I've used any of these things before (sde, forkd, tui).</p>
<p>blah blah blah tuning and efficiency and indexes very large tables</p>

<p>blah blah didn't use LINQ because I wanted to use some fairly complex SQL. My prior experience of object-relation mappers (in Python) is that they aren't much use for complex queries, though it is possible LINQ is better, and I may attempt to convert some of the queries to LINQ in future.</p>

<h3 id="hconcurrency">Concurrency and networking</h3>

<p>[UML diagram of interactions]

<p>blah blah explanation of diagram</p>

<p>blah blah concurrency with processes and within processes with threading, blah blah contract for movements of goods and locking process</p>

<p>blah blah in terms of formal testing and guarantees of reliability regarding the concurrent aspects of the system, I have not currently done much serious work. Concurrency is not well suited to normal unit testing, and effectively setting up automated tests of concurrent systems is a very large topic. I may do further reading on this subject in future.</p>

<p>As far as networking efficiency is concerned, here too I have done limited work - I have just let WCF handle the details of network communication. Here too I could do more work in future, though in reality any network code below the application level is generally written in C++ or Java, not C#. blah still, might be nice to build on what I have learnt about networking blah blah mention I have done some slightly complex networking stuff before (blah blah mention Twisted at Isotoma and my threaded Java app and TCP at Opera).</p>

<h3 id="hdotnet">C# and .NET</h3>

<p>[image of some sort of interactive real time data stream]</p>
<p>[image of commodity price variation graph]</p>

<p>blah blah GBM</p>

<p>blah blah compare to C++ and Java and Python</p>
<p>blah blah WPF. blah blah considered web front end, but I wanted an interactive interface to large amounts of real time data, whilst maintaining a responsive GUI. This set of requirements is very difficult to meet with Javascript, Flash, Silverlight, etc. I also wanted to have the option of one day adding more complex visualisations such as graphs and charts, which makes WPF attractive, and which pretty much rules out HTML/CSS/Javascript altogether. </p>

</div>
</body>
</html>
